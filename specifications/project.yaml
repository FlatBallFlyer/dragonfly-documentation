Project:
  Name: DragonFly
  BigIdea: 
    - DragonFly is a software as a service platform that allows users to design and deploy fully functional MVPs, suitable for continuous improvement, in a matter of hours or days instead of months. Users will define the application using a guided process to collect information that describes the system and then generate and deploy a MVP that is 80% complete in a matter of minutes. The services generated can be incrementally improved over time. Additional services can be described and added to the solution at any time.
  BusinessCase: 
    - The service provides a guided experience to collect design artifacts. Clients can choose to self-service and work through a series of editors with prompts to define the requirements for free
    - SSC can offer outcome based services to collect and compile the design artifacts. Here are the services that could be offered
    - - Document Roadmap and Experience requirements
    - - Document Architecture (Service Boundaries, Change Management, Data Models)
    - - UI Layout Design
    - - UI Styling 
    - When the design is complete DragonFly will generate a functional WebApp that runs live in the cloud for free. 
    - The app is live for 90 days, at which time the customer can choose from a monetized package
    - - Full service managed service with a dedicated team.
    - - Source code and warm handoff services to your team.
    - - Source code and help you build/transform your team.
  Personas:
    - Name: Donna 
      Description: the Designer will run the project and is responsible for collecting design artifacts.
    - Name: Pam
      Description: the Product Manager is the entrepreneur with a great idea and will be the primary client in the relationship. 
  Roadmap:
    NowHills:
    - Name: build-mvp
      Who: Donna
      What: clicks on a Build MVP button
      Wow: a Pseudo MVP is generated and deployed 
      Notes: 
        - This is POC, not go-live
        - CI/CD automation, GitLab WebIDE for UI.
        - README documented developer experiences. 
        - Simple CRUD (Vue to Go to Mongo) Triplet - DragonUI.
        - Content-type argument support for yaml requests/responses
        - Next - Launchable MVP
    NextHills:
    - Name: project-portal
      Who: Donna
      What: logs into a Project Portal and clicks on a create new project button
      Wow: she can edit design artifacts online and generate a PseudoMVP. 
      Notes: 
    - Name: mvp-with-iam
      Who: Donna
      What: adds an IAM service to the design
      Wow: when the application is generated for Pam she receives an invitation to set up her account where she can login, then use a simple Search dashboard to access multiple CRUD UIs that are secured by standards based bearer tokens.
      Notes: 
        - Add Identity Triplet Templates
        - Add Token to CRUD API and UI Templates
        - Add Search Triplet Templates
        - Create DragonFly WebApp with DragonFly
        - Editor for Project object with data for Documentation README 
        - Editor for Roadmap with Hills
        - Editor for Experience with Needs
        - Editor for Services with Context Boundaries (Source/Sync)
        - Editor for Environments with CD Requirements
        - Editor for Models with DragonFly Data Models
        - Editor for UI Layout with simple structure
    LaterHills:
    - Name: notifications
      Who: Donna
      What: adds a Notification Service to the design
      Wow: when the application is generated for Pam she can receive an email from the application when key events occur. 
      Notes: 
    - Name: chat-workshop
      Who: Pam
      What: initiates a multi-person chat conversation with DragonFly and her team
      Wow: DragonFly uses design thinking tools to collect design data and generates a MVP at the end.
      Notes: 
    - Name: integrate-mural
      Who: Pam
      What: conducts a Mural design thinking workshop
      Wow: DragonFly scrapes Project Info from the Mural
      Notes: 
      - project.yaml
      - experience.yaml
    - Name: integrate-draw
      Who: Donna
      What: uses draw.io to create/edit a design artifact
      Wow: DragonFly scrapes Project Info from the Draw.io diagram
      Notes: 
      - services.yaml
      - models.yaml
      - layout.yaml
    - Name: wysiwyg-ui
      Who: Donna
      What: uses a container/component preview app
      Wow: she can see what the UI will look like and can create the layouts.yaml file in a more interactive way
      Notes: 
      - More UI Controls / Containers
    - Name: integration-triplet
      Who: Donna
      What: adds an Integrations service to the design
      Wow: when the application is generated for Pam she can recieve email notifications of key events
      Notes: 
    - Name: integration-kafka
      Who: Donna
      What: adds an KafkaConnect service to the design
      Wow: when the application is generated a KafkaConnect services is deployed to isolate microservices
      Notes: 
    - Name: data-lake
      Who: Donna
      What: adds a Data Lake to the Services
      Wow: when the application is generated a Datalake is provisioned
      Notes: 

